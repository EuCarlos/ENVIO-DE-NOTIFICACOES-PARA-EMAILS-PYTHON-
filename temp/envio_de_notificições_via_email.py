# -*- coding: utf-8 -*-
"""Envio de Notificições via email.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18epI3mYabubVh2OXdKk1OLg1UFxANYzg

# Envio de notificações via E-mail

1. Primeiro passo para o projeto é criar um arquivo chamado "contas.json" (como não temos como gerar o arquivo, então o json será armazenado em uma variavel "contas")
"""

contas = [
  {
    "Nome": "João Silva",
    "Email": "joao.silva@exemplo.com",
    "Descricao_Conta": "Mensalidade do Sistema",
    "Valor": 150.00,
    "Data_Vencimento": "2025-07-12"
  },
  {
    "Nome": "Maria Oliveira",
    "Email": "maria.oliveira@exemplo.com",
    "Descricao_Conta": "Assinatura Software X",
    "Valor": 299.90,
    "Data_Vencimento": "2025-07-16"
  },
  {
    "Nome": "Carlos Souza",
    "Email": "carlos.souza@exemplo.com",
    "Descricao_Conta": "Serviço de Consultoria",
    "Valor": 1200.00,
    "Data_Vencimento": "2025-07-20"
  },
  {
    "Nome": "Ana Costa",
    "Email": "ana.costa@exemplo.com",
    "Descricao_Conta": "Manutenção Servidor",
    "Valor": 500.00,
    "Data_Vencimento": "2025-07-10"
  },
  {
    "Nome": "Pedro Almeida",
    "Email": "pedro.almeida@exemplo.com",
    "Descricao_Conta": "Hospedagem de Site",
    "Valor": 80.00,
    "Data_Vencimento": "2025-07-15"
  }
]

print(contas)

"""2. Agora o proximo passo é importar as bibliotecas"""

# import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta

"""3. Crie um arquivo .env com os seguintes paramentros:
```shell
SENDER_EMAIL=seu_email@gmail.com
SENDER_PASSWORD=sua_senha_de_app
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
```
"""

from dotenv import load_dotenv # Importa a função para carregar o .env
import os # Importa a biblioteca os para acessar variáveis de ambiente

# --- Carregar variáveis de ambiente do arquivo .env ---
load_dotenv()

# --- Configurações de E-mail (agora lidas do .env) ---
SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT")) # Converte para inteiro, pois vem como string

# --- Configurações de E-mail ---
# Preencha com as suas informações de e-mail
SENDER_EMAIL = "seu_email@gmail.com"  # Seu endereço de e-mail
SENDER_PASSWORD = "sua_senha_de_app" # Sua senha de aplicativo ou senha normal (para testes)
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587 # Ou 465 para SSL, 587 para TLS

# --- Configurações do Lembrete ---
DIAS_ANTES_VENCIMENTO = 3 # Enviar lembrete se faltarem X dias para o vencimento

# --- Função para Enviar E-mail ---
def enviar_email(destinatario, assunto, corpo_email):
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = destinatario
    msg['Subject'] = assunto
    msg.attach(MIMEText(corpo_email, 'plain'))

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls() # Inicia a conexão TLS para segurança
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        text = msg.as_string()
        server.sendmail(SENDER_EMAIL, destinatario, text)
        server.quit()
        print(f"E-mail enviado para: {destinatario} - Assunto: '{assunto}'")
    except Exception as e:
        print(f"Erro ao enviar e-mail para {destinatario}: {e}")
        print("Verifique suas credenciais de e-mail e configurações SMTP.")
        print("Para Gmail, lembre-se de usar 'Senha de App' se tiver verificação em duas etapas.")

# --- Lógica Principal ---
def main():
    print("Iniciando verificação de pagamentos...")
    ### ESSE CODIGO É PARA SER DESCOMENTADO QUANDO ESTIVER EM UM AMBIENTE OFICIAL
    # try:
    #     # Carregar os dados do arquivo JSON
    #     with open('contas.json', 'r', encoding='utf-8') as f:
    #         pagamentos = json.load(f)
    # except FileNotFoundError:
    #     print("Erro: O arquivo 'contas.json' não foi encontrado. Certifique-se de que ele está na mesma pasta do script.")
    #     return
    # except json.JSONDecodeError:
    #     print("Erro: O arquivo 'contas.json' não é um JSON válido. Verifique a sintaxe.")
    #     return

    ### ESSE CODIGO É PARA SER REMOVIDO QUANDO ESTIVER EM UM AMBIENTE OFICIAL
    pagamentos = contas

    hoje = datetime.now().date() # Data atual sem a hora

    for pagamento in pagamentos:
        try:
            nome = pagamento['Nome']
            email = pagamento['Email']
            descricao = pagamento['Descricao_Conta']
            valor = pagamento['Valor']
            data_vencimento_str = pagamento['Data_Vencimento']
            data_vencimento = datetime.strptime(data_vencimento_str, '%Y-%m-%d').date() # Converte string para data
        except KeyError as e:
            print(f"Erro: Campo '{e}' ausente em um dos registros JSON. Verifique a estrutura do arquivo.")
            continue # Pula para o próximo registro

        dias_restantes = (data_vencimento - hoje).days

        # Verificando se a conta está vencida (dias_restantes < 0)
        # Ou se está próxima do vencimento (entre 0 e DIAS_ANTES_VENCIMENTO)
        if dias_restantes < 0:
            assunto = f"Atenção: Seu pagamento de {descricao} está VENCIDO!"
            corpo = f"""Prezado(a) {nome},

Informamos que seu pagamento referente a '{descricao}', no valor de R$ {valor:.2f}, com vencimento em {data_vencimento.strftime('%d/%m/%Y')}, encontra-se VENCIDO.

Por favor, regularize sua situação o mais breve possível.

Atenciosamente,
Sua Empresa
"""
            enviar_email(email, assunto, corpo)
        elif 0 <= dias_restantes <= DIAS_ANTES_VENCIMENTO:
            assunto = f"Lembrete: Seu pagamento de {descricao} vence em breve!"
            corpo = f"""Prezado(a) {nome},

Este é um lembrete amigável de que seu pagamento referente a '{descricao}', no valor de R$ {valor:.2f}, vence em {data_vencimento.strftime('%d/%m/%Y')}.

Por favor, efetue o pagamento para evitar interrupções no serviço.

Atenciosamente,
Sua Empresa
"""
            enviar_email(email, assunto, corpo)
        else:
            print(f"Pagamento de {nome} ({descricao}) está em dia ou não se enquadra no lembrete. Vence em {dias_restantes} dias.")

    print("\nVerificação de pagamentos concluída.")

if __name__ == "__main__":
    main()